// Code generated by go-enum DO NOT EDIT.
// Version: 0.4.3
// Revision: 2bf3f089be242a89fd1c9b5ff14fdcf937b944a5
// Build Date: 2022-06-17T20:33:38Z
// Built By: goreleaser

package imagetypes

import (
	"fmt"
	"strings"
)

const (
	// Unknown is a ImageType of type Unknown.
	Unknown ImageType = iota
	// Jpeg is a ImageType of type Jpeg.
	Jpeg
	// Jpg is a ImageType of type Jpg.
	Jpg
	// Png is a ImageType of type Png.
	Png
	// Tiff is a ImageType of type Tiff.
	Tiff
	// Gif is a ImageType of type Gif.
	Gif
)

const _ImageTypeName = "UnknownJpegJpgPngTiffGif"

var _ImageTypeNames = []string{
	_ImageTypeName[0:7],
	_ImageTypeName[7:11],
	_ImageTypeName[11:14],
	_ImageTypeName[14:17],
	_ImageTypeName[17:21],
	_ImageTypeName[21:24],
}

// ImageTypeNames returns a list of possible string values of ImageType.
func ImageTypeNames() []string {
	tmp := make([]string, len(_ImageTypeNames))
	copy(tmp, _ImageTypeNames)
	return tmp
}

var _ImageTypeMap = map[ImageType]string{
	Unknown: _ImageTypeName[0:7],
	Jpeg:    _ImageTypeName[7:11],
	Jpg:     _ImageTypeName[11:14],
	Png:     _ImageTypeName[14:17],
	Tiff:    _ImageTypeName[17:21],
	Gif:     _ImageTypeName[21:24],
}

// String implements the Stringer interface.
func (x ImageType) String() string {
	if str, ok := _ImageTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ImageType(%d)", x)
}

var _ImageTypeValue = map[string]ImageType{
	_ImageTypeName[0:7]:                    Unknown,
	strings.ToLower(_ImageTypeName[0:7]):   Unknown,
	_ImageTypeName[7:11]:                   Jpeg,
	strings.ToLower(_ImageTypeName[7:11]):  Jpeg,
	_ImageTypeName[11:14]:                  Jpg,
	strings.ToLower(_ImageTypeName[11:14]): Jpg,
	_ImageTypeName[14:17]:                  Png,
	strings.ToLower(_ImageTypeName[14:17]): Png,
	_ImageTypeName[17:21]:                  Tiff,
	strings.ToLower(_ImageTypeName[17:21]): Tiff,
	_ImageTypeName[21:24]:                  Gif,
	strings.ToLower(_ImageTypeName[21:24]): Gif,
}

// ParseImageType attempts to convert a string to a ImageType.
func ParseImageType(name string) (ImageType, error) {
	if x, ok := _ImageTypeValue[name]; ok {
		return x, nil
	}
	return ImageType(0), fmt.Errorf("%s is not a valid ImageType, try [%s]", name, strings.Join(_ImageTypeNames, ", "))
}
